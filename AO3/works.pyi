from datetime import datetime
from functools import cached_property
from threading import Thread
from typing import Any, Literal, Mapping

from bs4 import BeautifulSoup
from requests import Response

from .chapters import Chapter
from .comments import Comment
from .series import Series
from .session import GuestSession
from .threadable import threadable
from .users import User

FileType = Literal["AZW3", "EPUB", "HTML", "MOBI", "PDF"]

class Work:
    _session: GuestSession | None
    chapters: list[Chapter]
    id: int
    _soup: BeautifulSoup | None
    def __init__(
        self,
        workid: int,
        session: GuestSession | None = ...,
        load: bool = ...,
        load_chapters: bool = ...,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> dict[str, Any]: ...
    def __setstate__(self, d: Mapping[str, Any]) -> None: ...
    def reload(self, load_chapters: bool = ...) -> Thread | None: ...
    def set_session(self, session: GuestSession) -> None: ...
    def load_chapters(self) -> None: ...
    def get_images(self) -> dict[int, tuple[str, ...]]: ...
    def download(self, filetype: FileType = ...) -> bytes: ...
    @threadable
    def download_to_file(self, filename: str, filetype: FileType = ...) -> None: ...
    @property
    def metadata(self) -> dict[str, Any]: ...
    def get_comments(self, maximum: int | None = ...) -> list[Comment]: ...
    @threadable
    def subscribe(self) -> None: ...
    @threadable
    def unsubscribe(self) -> None: ...
    @cached_property
    def text(self) -> str: ...
    @cached_property
    def authenticity_token(self) -> str | None: ...
    @cached_property
    def is_subscribed(self) -> bool: ...
    @cached_property
    def _sub_id(self) -> int: ...
    @threadable
    def leave_kudos(self) -> bool: ...
    @threadable
    def comment(self, comment_text: str, email: str = ..., name: str = ..., pseud: str | None = ...) -> Response: ...
    @threadable
    def bookmark(
        self,
        notes: str = ...,
        tags: list[str] | None = ...,
        collections: list[str] | None = ...,
        private: bool = ...,
        recommend: bool = ...,
        pseud: str | None = ...,
    ) -> None: ...
    @threadable
    def delete_bookmark(self) -> None: ...
    @threadable
    def collect(self, collections: list[str]) -> None: ...
    @cached_property
    def _bookmarkid(self) -> int | None: ...
    @property
    def loaded(self) -> bool: ...
    @property
    def oneshot(self) -> bool: ...
    @cached_property
    def series(self) -> list[Series]: ...
    @cached_property
    def authors(self) -> list[User]: ...
    @cached_property
    def nchapters(self) -> int: ...
    @cached_property
    def expected_chapters(self) -> int | None: ...
    @property
    def status(self) -> str: ...
    @cached_property
    def hits(self) -> int: ...
    @cached_property
    def kudos(self) -> int: ...
    @cached_property
    def comments(self) -> int: ...
    @cached_property
    def restricted(self) -> bool: ...
    @cached_property
    def words(self) -> int: ...
    @cached_property
    def language(self) -> str: ...
    @cached_property
    def bookmarks(self) -> int: ...
    @cached_property
    def title(self) -> str: ...
    @cached_property
    def date_published(self) -> datetime: ...
    @cached_property
    def date_edited(self) -> datetime: ...
    @cached_property
    def date_updated(self) -> datetime: ...
    @cached_property
    def tags(self) -> list[str]: ...
    @cached_property
    def characters(self) -> list[str]: ...
    @cached_property
    def relationships(self) -> list[str]: ...
    @cached_property
    def fandoms(self) -> list[str]: ...
    @cached_property
    def categories(self) -> list[str]: ...
    @cached_property
    def warnings(self) -> list[str]: ...
    @cached_property
    def rating(self) -> str | None: ...
    @cached_property
    def summary(self) -> str: ...
    @cached_property
    def start_notes(self) -> str: ...
    @cached_property
    def end_notes(self) -> str: ...
    @cached_property
    def url(self) -> str: ...
    @cached_property
    def complete(self) -> bool: ...
    @cached_property
    def collections(self) -> list[str]: ...
    def get(self, *args: Any, **kwargs: Any) -> Response: ...
    def request(self, url: str) -> BeautifulSoup: ...
    @staticmethod
    def str_format(string: str) -> str: ...
