from collections.abc import Mapping
from datetime import date
from functools import cached_property
from typing import Any

from bs4 import BeautifulSoup
from requests import Response

from .session import GuestSession
from .threadable import threadable
from .users import User
from .works import Work

class Series:
    id: int
    _session: GuestSession | None
    _soup: BeautifulSoup | None
    def __init__(self, seriesid: int, session: GuestSession | None = ..., load: bool = ...) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __getstate__(self) -> dict[str, tuple[Any, bool]]: ...
    def __setstate__(self, d: Mapping[str, Any]) -> None: ...
    def set_session(self, session: GuestSession) -> None: ...
    @threadable
    def reload(self) -> None: ...
    @threadable
    def subscribe(self) -> None: ...
    @threadable
    def unsubscribe(self) -> None: ...
    @threadable
    def bookmark(
        self,
        notes: str = ...,
        tags: list[str] | None = ...,
        collections: list[str] | None = ...,
        private: bool = ...,
        recommend: bool = ...,
        pseud: str | None = ...,
    ) -> None: ...
    @threadable
    def delete_bookmark(self) -> None: ...
    @cached_property
    def _bookmarkid(self) -> int | None: ...
    @cached_property
    def url(self) -> str: ...
    @property
    def loaded(self) -> bool: ...
    @cached_property
    def authenticity_token(self) -> str | None: ...
    @cached_property
    def is_subscribed(self) -> bool: ...
    @cached_property
    def _sub_id(self) -> int: ...
    @cached_property
    def name(self) -> str: ...
    @cached_property
    def creators(self) -> list[User]: ...
    @cached_property
    def series_begun(self) -> date: ...
    @cached_property
    def series_updated(self) -> date: ...
    @cached_property
    def words(self) -> int: ...
    @cached_property
    def nworks(self) -> int: ...
    @cached_property
    def complete(self) -> bool: ...
    @cached_property
    def description(self) -> str: ...
    @cached_property
    def notes(self) -> str: ...
    @cached_property
    def nbookmarks(self) -> int: ...
    @cached_property
    def work_list(self) -> list[Work]: ...
    def get(self, *args: Any, **kwargs: Any) -> Response: ...
    def request(self, url: str) -> BeautifulSoup: ...
