from collections.abc import Mapping
from functools import cached_property
from typing import Any

from bs4 import BeautifulSoup
from requests import Response

from .comments import Comment
from .session import GuestSession
from .threadable import threadable
from .works import Work

class Chapter:
    """
    AO3 chapter object
    """

    _session: GuestSession | None
    _work: Work | None
    id: int | None
    _soup: BeautifulSoup | None
    def __init__(
        self,
        chapterid: int | None,
        work: Work | None,
        session: GuestSession | None = ...,
        load: bool = ...,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> dict[str, Any]: ...
    def __setstate__(self, d: Mapping[str, Any]) -> None: ...
    def set_session(self, session: GuestSession) -> None: ...
    @threadable
    def reload(self) -> None: ...
    @threadable
    def comment(
        self,
        comment_text: str,
        email: str = ...,
        name: str = ...,
        pseud: str | None = ...,
    ) -> Response | None: ...
    def get_comments(self, maximum: int | None = ...) -> list[Comment]: ...
    def get_images(self) -> tuple[tuple[str, int], ...]: ...
    @property
    def loaded(self) -> bool: ...
    @property
    def authenticity_token(self) -> str | None: ...
    @property
    def work(self) -> Work | None: ...
    @cached_property
    def text(self) -> str: ...
    @cached_property
    def title(self) -> str: ...
    @cached_property
    def number(self) -> int: ...
    @cached_property
    def words(self) -> int: ...
    @cached_property
    def summary(self) -> str: ...
    @cached_property
    def start_notes(self) -> str: ...
    @cached_property
    def end_notes(self) -> str: ...
    @cached_property
    def url(self) -> str: ...
    def request(self, url: str) -> BeautifulSoup: ...
    def get(self, *args: Any, **kwargs: Any) -> Response: ...
