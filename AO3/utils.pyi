from re import Pattern
from typing import Final, NoReturn
from typing_extensions import TypeAlias

from requests import Response

from .chapters import Chapter
from .comments import Comment
from .series import Series
from .session import GuestSession
from .users import User
from .works import Work

_Bookmarkable: TypeAlias = Work | Series
_Collectable: TypeAlias = Work
_Commentable: TypeAlias = Work | Chapter
_Kudoable: TypeAlias = Work
_Subscribable: TypeAlias = Work | Series | User

_fandoms: list[str] | None
_languages: list[str] | None

AO3_AUTH_ERROR_URL: Final[str]
AO3_WORK_REGEX: Final[Pattern[str]]

class AO3Error(Exception):
    def __init__(self, message: str | None = ..., errors: list[str] | None = ...) -> None: ...

class LoginError(AO3Error): ...
class UnloadedError(AO3Error): ...
class UnexpectedResponseError(AO3Error): ...
class InvalidIdError(AO3Error): ...
class DownloadError(AO3Error): ...
class AuthError(AO3Error): ...
class DuplicateCommentError(AO3Error): ...
class PseudError(AO3Error): ...
class HTTPError(AO3Error): ...
class BookmarkError(AO3Error): ...
class CollectError(AO3Error): ...

class Query:
    fields: list[str]
    def __init__(self) -> None: ...
    def add_field(self, text: str) -> None: ...
    @property
    def string(self) -> str: ...

class Constraint:
    _lb: int
    _ub: int | None
    def __init__(self, lowerbound: int = ..., upperbound: int | None = ...) -> None: ...
    def __str__(self) -> str: ...
    @property
    def string(self) -> str: ...

def word_count(text: str) -> int: ...
def set_rqtw(value: int) -> None: ...
def set_timew(value: int) -> None: ...
def limit_requests(limit: bool = ...) -> None: ...
def load_fandoms() -> None: ...
def load_languages() -> None: ...
def get_languages() -> list[str]: ...
def search_fandom(fandom_string: str) -> list[str]: ...
def workid_from_url(url: str) -> int | None: ...
def comment(
    commentable: _Commentable,
    comment_text: str,
    session: GuestSession,
    fullwork: bool = ...,
    commentid: str | int | None = ...,
    email: str = ...,
    name: str = ...,
    pseud: str | None = ...,
) -> Response: ...
def delete_comment(comment: Comment, session: GuestSession | None = ...) -> None: ...
def kudos(work: _Kudoable, session: GuestSession) -> bool: ...
def subscribe(
    subscribable: _Subscribable,
    worktype: str,
    session: GuestSession | None = ...,
    unsubscribe: bool = ...,
    subid: str | int | None = ...,
) -> Response | None: ...
def bookmark(
    bookmarkable: _Bookmarkable,
    session: GuestSession | None = ...,
    notes: str = "",
    tags: list[str] | None = ...,
    collections: list[str] | None = ...,
    private: bool = ...,
    recommend: bool = ...,
    pseud: str | None = ...,
) -> None: ...
def delete_bookmark(
    bookmarkid: int,
    session: GuestSession | None = ...,
    auth_token: str | None = ...,
) -> None: ...
def handle_bookmark_errors(request: Response) -> NoReturn: ...
def get_pseud_id(
    ao3object: Work | Series | Chapter,
    session: GuestSession | None = ...,
    specified_pseud: str | None = ...,
) -> str | None: ...
def collect(
    collectable: _Collectable,
    session: GuestSession | None = ...,
    collections: list[str] | None = ...,
) -> None: ...
